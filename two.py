# -*- coding: utf-8 -*-
"""two.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19XGSXbEuEJnu8hoxhqy53WtSLCE4txwA
"""

#Fashion MNIST classification of MNIST Dataset using CNN
# Import necessary libraries
import tensorflow as tf
from tensorflow.keras import datasets, layers, models, callbacks
import matplotlib.pyplot as plt
# Load and preprocess the MNIST dataset
(train_images, train_labels), (test_images, test_labels) =datasets.mnist.load_data()
# Normalize pixel values to between 0 and 1
train_images = train_images / 255.0
test_images = test_images / 255.0
# Reshape the images to (28, 28, 1) to match the input shape for the CNN
train_images = train_images.reshape((train_images.shape[0], 28, 28, 1))
test_images = test_images.reshape((test_images.shape[0], 28, 28, 1))
# Build the CNN model with more layers and Dropout for regularization
model = models.Sequential()
# First Convolutional Layer + MaxPooling
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D((2, 2)))
# Second Convolutional Layer + MaxPooling
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
# Third Convolutional Layer + MaxPooling
model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
# Flatten the output before feeding into Dense layers
model.add(layers.Flatten())
# Fully connected (Dense) layers with Dropout to prevent overfitting
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dropout(0.5)) # Dropout layer with 50% dropout rate
# Output layer (softmax) for multi-class classification
model.add(layers.Dense(10, activation='softmax'))
# Compile the model with Adam optimizer, categorical crossentropy loss
model.compile(optimizer='adam',
loss='sparse_categorical_crossentropy',
metrics=['accuracy'])
# Early stopping callback to prevent overfitting
early_stopping = callbacks.EarlyStopping(monitor='val_loss', patience=3,
restore_best_weights=True)
# Train the model with validation data and early stopping
history = model.fit(train_images, train_labels, epochs=20,
validation_data=(test_images, test_labels),
callbacks=[early_stopping])
# Evaluate the model on test data
test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f"Test Accuracy: {test_acc:.4f}")
# Plot training and validation accuracy over epochs
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')
plt.show()
# Optional: Test the model by making predictions on test images
predictions = model.predict(test_images)
# Display the first prediction and the corresponding actual label
print(f"Predicted label: {predictions[0].argmax()}, Actual label: {test_labels[0]}")