# -*- coding: utf-8 -*-
"""one.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sdmWrlC9lqPszAkNfqsxxosrsHZhSfSR
"""

#Classification with Multilayer Perceptron using Scikit-learn(MNIST Dataset)
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report, confusion_matrix
# Load MNIST dataset
mnist = fetch_openml('mnist_784', version=1)
# Split data and labels
X, y = mnist["data"], mnist["target"]
# Convert labels to integers
y = y.astype(np.int8)
# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
# Standardize the dataset (mean=0, variance=1)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
# Create MLPClassifier model
mlp = MLPClassifier(hidden_layer_sizes=(64, 64), max_iter=20, alpha=1e-4,
solver='adam', verbose=10, random_state=1)
# Train the model
mlp.fit(X_train_scaled, y_train)
# Predict on test data
y_pred = mlp.predict(X_test_scaled)
# Classification report
print("Classification Report:\n", classification_report(y_test, y_pred))
# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
# Plot confusion matrix using seaborn heatmap
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues",
xticklabels=range(10), yticklabels=range(10))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()
# Reshape the original X_test (not scaled) to (n_samples, 28, 28)
X_test_images = X_test.to_numpy().reshape(-1, 28, 28) # Reshape to
# (n_samples, 28, 28)
# Plotting some test images with predictions
fig, axes = plt.subplots(2, 5, figsize=(10, 5)) # Create a 2x5 grid of subplots
for i, ax in enumerate(axes.flat):
  ax.imshow(X_test_images[i], cmap='gray') # Display the image in grayscale
  ax.set_title(f"True: {y_test.iloc[i]}\nPred: {y_pred[i]}") # Set the title with
# true and predicted labels
  ax.axis('off') # Hide axis lines and labels
plt.show() # Display the plot